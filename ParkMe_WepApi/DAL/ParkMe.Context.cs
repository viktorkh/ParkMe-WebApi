//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ParkMe_WepApi.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TestDBEntities1 : DbContext
    {
        public TestDBEntities1()
            : base("name=TestDBEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<E_Customers> E_Customers { get; set; }
        public virtual DbSet<E_Invoces> E_Invoces { get; set; }
        public virtual DbSet<E_Orders> E_Orders { get; set; }
        public virtual DbSet<E_ParkingStations> E_ParkingStations { get; set; }
        public virtual DbSet<E_Tasks> E_Tasks { get; set; }
        public virtual DbSet<E_Valets> E_Valets { get; set; }
        public virtual DbSet<E_Vehicles> E_Vehicles { get; set; }
        public virtual DbSet<LT_DriverLicenseCategories> LT_DriverLicenseCategories { get; set; }
        public virtual DbSet<LT_OrderStatuses> LT_OrderStatuses { get; set; }
        public virtual DbSet<LT_TaskStatuses> LT_TaskStatuses { get; set; }
        public virtual DbSet<LT_TaskTypes> LT_TaskTypes { get; set; }
        public virtual DbSet<LT_VehicleColors> LT_VehicleColors { get; set; }
        public virtual DbSet<LT_VehicleTypes> LT_VehicleTypes { get; set; }
        public virtual DbSet<LT_Violations> LT_Violations { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<REL_ValetsViolations> REL_ValetsViolations { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int spAppendCallBackTask(Nullable<int> orderID, Nullable<int> valetID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var valetIDParameter = valetID.HasValue ?
                new ObjectParameter("ValetID", valetID) :
                new ObjectParameter("ValetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppendCallBackTask", orderIDParameter, valetIDParameter);
        }
    
        public virtual int spAppendFirstTask(Nullable<int> orderID, Nullable<int> parkingID, Nullable<int> valetID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var parkingIDParameter = parkingID.HasValue ?
                new ObjectParameter("ParkingID", parkingID) :
                new ObjectParameter("ParkingID", typeof(int));
    
            var valetIDParameter = valetID.HasValue ?
                new ObjectParameter("ValetID", valetID) :
                new ObjectParameter("ValetID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAppendFirstTask", orderIDParameter, parkingIDParameter, valetIDParameter);
        }
    
        public virtual int spCallCarBack(string customerPhone, string callBackAddress)
        {
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var callBackAddressParameter = callBackAddress != null ?
                new ObjectParameter("CallBackAddress", callBackAddress) :
                new ObjectParameter("CallBackAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCallCarBack", customerPhoneParameter, callBackAddressParameter);
        }
    
        public virtual int spCreateOrder(string customerPhone, Nullable<System.DateTime> orderDate, string orderAddress)
        {
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var orderAddressParameter = orderAddress != null ?
                new ObjectParameter("OrderAddress", orderAddress) :
                new ObjectParameter("OrderAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateOrder", customerPhoneParameter, orderDateParameter, orderAddressParameter);
        }
    
        public virtual int spFinishOrder(string customerPhone)
        {
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFinishOrder", customerPhoneParameter);
        }
    
        public virtual int spFinishTask(string valetID)
        {
            var valetIDParameter = valetID != null ?
                new ObjectParameter("ValetID", valetID) :
                new ObjectParameter("ValetID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFinishTask", valetIDParameter);
        }
    
        public virtual int spGetOpenOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetOpenOrders");
        }
    
        public virtual int spGetStatistics()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetStatistics");
        }
    
        public virtual ObjectResult<Nullable<int>> spCreateOrder1(string customerPhone, Nullable<System.DateTime> orderDate, string orderAddress)
        {
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var orderAddressParameter = orderAddress != null ?
                new ObjectParameter("OrderAddress", orderAddress) :
                new ObjectParameter("OrderAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCreateOrder1", customerPhoneParameter, orderDateParameter, orderAddressParameter);
        }
    
        public virtual ObjectResult<spGetAllOrders_Result> spGetAllOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllOrders_Result>("spGetAllOrders");
        }
    }
}
